project(ten)
cmake_minimum_required(VERSION 2.8)
enable_testing()

include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/ten.cmake)
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/ragel.cmake)
include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/configure.cmake)

add_definitions(-DBOOST_TEST_DYN_LINK)

add_subdirectory(glog)
include_directories(glog)

include_directories(boost.context)
if(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
    set(ASM boost.context/libs/context/src/asm/fcontext_x86_64_sysv_elf_gas.S)
else()
    set(ASM boost.context/libs/context/src/asm/fcontext_i386_sysv_elf_gas.S)
endif()
SET_SOURCE_FILES_PROPERTIES(${ASM} PROPERTIES LANGUAGE C)

if (CARES_LIB AND CARES_INCLUDE)
    set(RESOLVER_SRC net/cares.cc)
else(CARES_LIB AND CARES_INCLUDE)
    set(CARES_LIB "")
    set(RESOLVER_SRC net/resolve.cc)
endif (CARES_LIB AND CARES_INCLUDE)

add_library(ten
    task/task.cc
    task/proc.cc
    error.cc ioproc.cc net.cc zip.cc json.cc ${ASM}
    ${RESOLVER_SRC}
    boost.context/libs/context/src/fcontext.cpp)
add_dependencies(ten libglog)

target_link_libraries(ten rt glog ${CARES_LIB})

add_subdirectory(examples)
add_subdirectory(tests)
add_subdirectory(benchmarks)

add_subdirectory(uri)
add_subdirectory(http)

add_subdirectory(jansson)
add_subdirectory(stringencoders)
add_subdirectory(msgpack)

add_custom_target(world DEPENDS
    examples
    benchmarks
    )
